//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/Facultate/Anul 2/Semestrul 1/LFC/Teme Obligatorii/Tema2/Compilator/Compilator/Compilator/MiniLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MiniLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, KEYWORD=11, IDENTIFIER=12, NUMBER=13, STRING=14, COMMENT=15, 
		COMMENT_MULTI=16, WS=17, ADD=18, SUB=19, MUL=20, DIV=21, MOD=22, LT=23, 
		GT=24, LE=25, GE=26, EQ=27, NE=28, AND=29, OR=30, NOT=31, ASSIGN=32, ADD_ASSIGN=33, 
		SUB_ASSIGN=34, MUL_ASSIGN=35, DIV_ASSIGN=36, MOD_ASSIGN=37, INCREMENT=38, 
		DECREMENT=39, SEMICOLON=40, LPAREN=41, RPAREN=42, LBRACE=43, RBRACE=44, 
		COMMA=45;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "KEYWORD", "IDENTIFIER", "NUMBER", "STRING", "COMMENT", "COMMENT_MULTI", 
		"WS", "ADD", "SUB", "MUL", "DIV", "MOD", "LT", "GT", "LE", "GE", "EQ", 
		"NE", "AND", "OR", "NOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
		"DIV_ASSIGN", "MOD_ASSIGN", "INCREMENT", "DECREMENT", "SEMICOLON", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "COMMA"
	};


	public MiniLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'return'", "'if'", "'else'", "'for'", "'while'", "'int'", "'float'", 
		"'double'", "'string'", "'void'", null, null, null, null, null, null, 
		null, "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'>'", "'<='", "'>='", 
		"'=='", "'!='", "'&&'", "'||'", "'!'", "'='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'++'", "'--'", "';'", "'('", "')'", "'{'", "'}'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "KEYWORD", 
		"IDENTIFIER", "NUMBER", "STRING", "COMMENT", "COMMENT_MULTI", "WS", "ADD", 
		"SUB", "MUL", "DIV", "MOD", "LT", "GT", "LE", "GE", "EQ", "NE", "AND", 
		"OR", "NOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
		"MOD_ASSIGN", "INCREMENT", "DECREMENT", "SEMICOLON", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "COMMA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,45,321,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,
		2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
		1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,190,8,10,1,11,1,11,5,11,194,
		8,11,10,11,12,11,197,9,11,1,12,4,12,200,8,12,11,12,12,12,201,1,12,1,12,
		4,12,206,8,12,11,12,12,12,207,3,12,210,8,12,1,13,1,13,5,13,214,8,13,10,
		13,12,13,217,9,13,1,13,1,13,1,14,1,14,1,14,1,14,5,14,225,8,14,10,14,12,
		14,228,9,14,1,14,1,14,1,15,1,15,1,15,1,15,5,15,236,8,15,10,15,12,15,239,
		9,15,1,15,1,15,1,15,1,15,1,15,1,16,4,16,247,8,16,11,16,12,16,248,1,16,
		1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
		1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,
		1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,
		1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,
		1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,
		2,215,237,0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
		24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
		36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,1,0,5,3,0,65,
		90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,10,10,13,13,
		3,0,9,10,13,13,32,32,337,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
		0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
		1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
		0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
		1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
		0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
		0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
		1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,1,91,1,0,0,0,3,98,1,0,0,0,5,101,1,0,
		0,0,7,106,1,0,0,0,9,110,1,0,0,0,11,116,1,0,0,0,13,120,1,0,0,0,15,126,1,
		0,0,0,17,133,1,0,0,0,19,140,1,0,0,0,21,189,1,0,0,0,23,191,1,0,0,0,25,199,
		1,0,0,0,27,211,1,0,0,0,29,220,1,0,0,0,31,231,1,0,0,0,33,246,1,0,0,0,35,
		252,1,0,0,0,37,254,1,0,0,0,39,256,1,0,0,0,41,258,1,0,0,0,43,260,1,0,0,
		0,45,262,1,0,0,0,47,264,1,0,0,0,49,266,1,0,0,0,51,269,1,0,0,0,53,272,1,
		0,0,0,55,275,1,0,0,0,57,278,1,0,0,0,59,281,1,0,0,0,61,284,1,0,0,0,63,286,
		1,0,0,0,65,288,1,0,0,0,67,291,1,0,0,0,69,294,1,0,0,0,71,297,1,0,0,0,73,
		300,1,0,0,0,75,303,1,0,0,0,77,306,1,0,0,0,79,309,1,0,0,0,81,311,1,0,0,
		0,83,313,1,0,0,0,85,315,1,0,0,0,87,317,1,0,0,0,89,319,1,0,0,0,91,92,5,
		114,0,0,92,93,5,101,0,0,93,94,5,116,0,0,94,95,5,117,0,0,95,96,5,114,0,
		0,96,97,5,110,0,0,97,2,1,0,0,0,98,99,5,105,0,0,99,100,5,102,0,0,100,4,
		1,0,0,0,101,102,5,101,0,0,102,103,5,108,0,0,103,104,5,115,0,0,104,105,
		5,101,0,0,105,6,1,0,0,0,106,107,5,102,0,0,107,108,5,111,0,0,108,109,5,
		114,0,0,109,8,1,0,0,0,110,111,5,119,0,0,111,112,5,104,0,0,112,113,5,105,
		0,0,113,114,5,108,0,0,114,115,5,101,0,0,115,10,1,0,0,0,116,117,5,105,0,
		0,117,118,5,110,0,0,118,119,5,116,0,0,119,12,1,0,0,0,120,121,5,102,0,0,
		121,122,5,108,0,0,122,123,5,111,0,0,123,124,5,97,0,0,124,125,5,116,0,0,
		125,14,1,0,0,0,126,127,5,100,0,0,127,128,5,111,0,0,128,129,5,117,0,0,129,
		130,5,98,0,0,130,131,5,108,0,0,131,132,5,101,0,0,132,16,1,0,0,0,133,134,
		5,115,0,0,134,135,5,116,0,0,135,136,5,114,0,0,136,137,5,105,0,0,137,138,
		5,110,0,0,138,139,5,103,0,0,139,18,1,0,0,0,140,141,5,118,0,0,141,142,5,
		111,0,0,142,143,5,105,0,0,143,144,5,100,0,0,144,20,1,0,0,0,145,146,5,105,
		0,0,146,147,5,110,0,0,147,190,5,116,0,0,148,149,5,102,0,0,149,150,5,108,
		0,0,150,151,5,111,0,0,151,152,5,97,0,0,152,190,5,116,0,0,153,154,5,115,
		0,0,154,155,5,116,0,0,155,156,5,114,0,0,156,157,5,105,0,0,157,158,5,110,
		0,0,158,190,5,103,0,0,159,160,5,118,0,0,160,161,5,111,0,0,161,162,5,105,
		0,0,162,190,5,100,0,0,163,164,5,100,0,0,164,165,5,111,0,0,165,166,5,117,
		0,0,166,167,5,98,0,0,167,168,5,108,0,0,168,190,5,101,0,0,169,170,5,105,
		0,0,170,190,5,102,0,0,171,172,5,101,0,0,172,173,5,108,0,0,173,174,5,115,
		0,0,174,190,5,101,0,0,175,176,5,102,0,0,176,177,5,111,0,0,177,190,5,114,
		0,0,178,179,5,119,0,0,179,180,5,104,0,0,180,181,5,105,0,0,181,182,5,108,
		0,0,182,190,5,101,0,0,183,184,5,114,0,0,184,185,5,101,0,0,185,186,5,116,
		0,0,186,187,5,117,0,0,187,188,5,114,0,0,188,190,5,110,0,0,189,145,1,0,
		0,0,189,148,1,0,0,0,189,153,1,0,0,0,189,159,1,0,0,0,189,163,1,0,0,0,189,
		169,1,0,0,0,189,171,1,0,0,0,189,175,1,0,0,0,189,178,1,0,0,0,189,183,1,
		0,0,0,190,22,1,0,0,0,191,195,7,0,0,0,192,194,7,1,0,0,193,192,1,0,0,0,194,
		197,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,24,1,0,0,0,197,195,1,0,
		0,0,198,200,7,2,0,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,1,0,0,0,201,
		202,1,0,0,0,202,209,1,0,0,0,203,205,5,46,0,0,204,206,7,2,0,0,205,204,1,
		0,0,0,206,207,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,210,1,0,0,0,
		209,203,1,0,0,0,209,210,1,0,0,0,210,26,1,0,0,0,211,215,5,34,0,0,212,214,
		9,0,0,0,213,212,1,0,0,0,214,217,1,0,0,0,215,216,1,0,0,0,215,213,1,0,0,
		0,216,218,1,0,0,0,217,215,1,0,0,0,218,219,5,34,0,0,219,28,1,0,0,0,220,
		221,5,47,0,0,221,222,5,47,0,0,222,226,1,0,0,0,223,225,8,3,0,0,224,223,
		1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,229,1,0,0,
		0,228,226,1,0,0,0,229,230,6,14,0,0,230,30,1,0,0,0,231,232,5,47,0,0,232,
		233,5,42,0,0,233,237,1,0,0,0,234,236,9,0,0,0,235,234,1,0,0,0,236,239,1,
		0,0,0,237,238,1,0,0,0,237,235,1,0,0,0,238,240,1,0,0,0,239,237,1,0,0,0,
		240,241,5,42,0,0,241,242,5,47,0,0,242,243,1,0,0,0,243,244,6,15,0,0,244,
		32,1,0,0,0,245,247,7,4,0,0,246,245,1,0,0,0,247,248,1,0,0,0,248,246,1,0,
		0,0,248,249,1,0,0,0,249,250,1,0,0,0,250,251,6,16,0,0,251,34,1,0,0,0,252,
		253,5,43,0,0,253,36,1,0,0,0,254,255,5,45,0,0,255,38,1,0,0,0,256,257,5,
		42,0,0,257,40,1,0,0,0,258,259,5,47,0,0,259,42,1,0,0,0,260,261,5,37,0,0,
		261,44,1,0,0,0,262,263,5,60,0,0,263,46,1,0,0,0,264,265,5,62,0,0,265,48,
		1,0,0,0,266,267,5,60,0,0,267,268,5,61,0,0,268,50,1,0,0,0,269,270,5,62,
		0,0,270,271,5,61,0,0,271,52,1,0,0,0,272,273,5,61,0,0,273,274,5,61,0,0,
		274,54,1,0,0,0,275,276,5,33,0,0,276,277,5,61,0,0,277,56,1,0,0,0,278,279,
		5,38,0,0,279,280,5,38,0,0,280,58,1,0,0,0,281,282,5,124,0,0,282,283,5,124,
		0,0,283,60,1,0,0,0,284,285,5,33,0,0,285,62,1,0,0,0,286,287,5,61,0,0,287,
		64,1,0,0,0,288,289,5,43,0,0,289,290,5,61,0,0,290,66,1,0,0,0,291,292,5,
		45,0,0,292,293,5,61,0,0,293,68,1,0,0,0,294,295,5,42,0,0,295,296,5,61,0,
		0,296,70,1,0,0,0,297,298,5,47,0,0,298,299,5,61,0,0,299,72,1,0,0,0,300,
		301,5,37,0,0,301,302,5,61,0,0,302,74,1,0,0,0,303,304,5,43,0,0,304,305,
		5,43,0,0,305,76,1,0,0,0,306,307,5,45,0,0,307,308,5,45,0,0,308,78,1,0,0,
		0,309,310,5,59,0,0,310,80,1,0,0,0,311,312,5,40,0,0,312,82,1,0,0,0,313,
		314,5,41,0,0,314,84,1,0,0,0,315,316,5,123,0,0,316,86,1,0,0,0,317,318,5,
		125,0,0,318,88,1,0,0,0,319,320,5,44,0,0,320,90,1,0,0,0,10,0,189,195,201,
		207,209,215,226,237,248,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
